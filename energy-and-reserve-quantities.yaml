openapi: 3.0.2
info:
  title: Energy and Reserve Quantities
  description: >+
    #### Pre-requisites ####

    See [How To Call Our APIs](guides) for information on registration, authentication and authorisation requirements.

    ## Overview ##

    The purpose of this API is to retrieve energy and reserve quantities for identified schedule(s).


    Quantity information can be filtered in a variety of different ways. The minimum required parameters to filter data are a list of one or more schedules (market run types) and the market type being queried (Energy or Reserves).


    * Energy quantities for a single schedule can be queried through the `/schedules/{schedule}/energy` path.

    * Reserve quantities for a single schedule can be queried through the `/schedules/{schedule}/reserves` path.
    
    * Energy quantities for multiple schedules can be queried through the `/energy` path, identifying one or more schedules in the `schedules` query parameter.
    
    * Reserve quantities for multiple schedules can be queried through the `/reserves` path, identifying one or more schedules in the `schedules` query parameter.

    Schedules supported by this API can be obtained through a query to `/schedules`.


    ## API Parameters ##

    ### Run Class Filter ###
    
    Reserve Quantities must include a `runClass` filter. This query parameter must be set to one of `InstantaneousReserve`, `ReserveOffers` or `AdjustedReserveOffers`. 


    ### Range Requests ###
    
    Quantity data can be filtered using date-times for absolute windows, or by period offsets for rolling windows.
    
    
    The available query parameters for specifying a range are:
    
    * `from`
    
    * `to`
    
    * `back`
    
    * `forward`
    
    
    **From and To**
    
    
    The `from` and `to` parameters specify a date-time for which to filter queried data by. None, one or both parameters may be provided. The date-time must conform to the `RFC3339` standard formatting, e.g. `yyyy-MM-dd'T'HH:mm:ssXXX`. 
    
    
    If both `from` and `to` are provided, this is an inclusive window of time to query data for.
        
    
    If a `from` parameter is provided without a corresponding `to` parameter, this represents a query of data filtered from the trading period implied by the `from` date-time forward as far as possible for the queried schedule(s).
    
    
    If a `to` parameter is provided without a corresponding `from` parameter, this represents a query of data filtered from the oldest data available forward to the trading period implied by the `to` date-time.
    
    
    **Back and Forward**
    
    
    Unlike the `from` and `to` parameters, the `back` and `forward` filter can be used to identify a sliding window of data to query. A request cannot include both `from` and/or `to` parameters __and__ `back` and/or `forward`.
    
    
    The `back` parameter specifies a number of trading periods _before_ the current trading period to include data for. Correspondingly, the `to` parameter specifies a number of trading periods _ahead_ of the current trading period to include data for.
    
    
    For example, if the current trading period is `23` (11:00:00 NZT - 11:29:59 NZT) and both `back` and `forward` are set to `5`, data from trading periods `18` - `28` will be queried. Note that not all schedules will have data available beyond the current trading period.

    ### Island Filter ###
    
    The data can also be filtered by `Island` (`NI` or `SI`). When the `island` query parameter is set, only information pertaining to that island will be returned.
    
  version: 0.0.1
externalDocs:
  description: Check out the WITS portal
  url: 'https://www2.electricityinfo.co.nz/'

servers:
  - url: 'https://api.electricityinfo.co.nz/api/quantities/v1'
    variables: {}
    description: Live
    
security:
  - oAuthClientCredentials: []

paths:
     
  /schedules:
    get:
      tags: 
        - Energy
        - Reserves
      summary: Retrieve a list of schedules for which quantity data is currently available
      responses:
        "200":
          $ref: '#/components/responses/listSchedulesResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'
        
          
  /schedules/{schedule}/energy:
    parameters:
      - in: path
        name: schedule
        required: true
        schema:
          $ref: '#/components/schemas/schedule'
      - $ref: '#/components/parameters/from'
      - $ref: '#/components/parameters/to'
      - $ref: '#/components/parameters/back'
      - $ref: '#/components/parameters/forward'
      - $ref: '#/components/parameters/island'
    get:
      tags: 
        - Energy
      summary: Retrieve a list of energy quantities for the given schedule
      responses:
        "200":
          $ref: '#/components/responses/getScheduleEnergyQuantitiesResponse'  
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "404":
          $ref: '#/components/responses/notFoundResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'

  /schedules/{schedule}/reserves:
    parameters:
      - in: path
        name: schedule
        required: true
        schema:
          $ref: '#/components/schemas/schedule'
      - $ref: '#/components/parameters/runClass'
      - $ref: '#/components/parameters/from'
      - $ref: '#/components/parameters/to'
      - $ref: '#/components/parameters/back'
      - $ref: '#/components/parameters/forward'
      - $ref: '#/components/parameters/island'
    get:
      tags: 
        - Reserves
      summary: Retrieve a list of reserve quantities for the given schedule
      responses:
        "200":
          $ref: '#/components/responses/getScheduleReserveQuantitiesResponse'  
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "404":
          $ref: '#/components/responses/notFoundResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'
          
  /energy:
    get: 
      summary: Retrieve a list of energy quantities across schedules
      tags: 
        - Energy
      parameters:
        - $ref: '#/components/parameters/schedules'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/back'
        - $ref: '#/components/parameters/forward'
        - $ref: '#/components/parameters/island'
      responses:
        "200":
          $ref: '#/components/responses/getEnergyResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'     

  /reserves:
    get: 
      summary: Retrieve a list of reserve quantities across schedules
      tags: 
        - Reserves
      parameters:
        - $ref: '#/components/parameters/schedules'
        - $ref: '#/components/parameters/runClass'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/back'
        - $ref: '#/components/parameters/forward'
        - $ref: '#/components/parameters/island'
      responses:
        "200":
          $ref: '#/components/responses/getReservesResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'   

components:
  securitySchemes:
    oAuthClientCredentials:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /login/oauth2/token
          
  parameters:
    
    schedules:
      in: query
      name: schedules
      style: form
      explode: false     
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/schedule'
    from:
      in: query
      name: from
      schema:
        type: string
        format: datetime
      required: false
      description: Optional trading date-time to filter historical data
    to:
      in: query
      name: to
      schema:
        type: string
        format: datetime
      required: false
      description: Optional trading date-time to filter historical data
    back:
      in: query
      name: back
      schema:
        type: integer
        minimum: 1
        maximum: 48
      required: false
      description: Optional trading period filter
    forward:
      in: query
      name: forward
      schema:
        type: integer
        minimum: 1
        maximum: 48
      required: false
      description: Optional trading period filter
    island:
      in: query
      name: island
      schema:
        $ref: '#/components/schemas/island'
      required: false
      description: Return quantity data only for the selected island
    runClass:
      in: query
      name: runClass
      schema:
        $ref: '#/components/schemas/run_class'
      required: true
      description: Mandatory run class filter
      
  responses:

    listSchedulesResponse:
      description: Successfully listed schedules
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listSchedulesResponse'
  
    getEnergyResponse:
      description: Successfully received energy quantities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getEnergyQuantitiesResponse'

    getReservesResponse:
      description: Successfully received reserve quantities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getReserveQuantitiesResponse'
              
    getScheduleEnergyQuantitiesResponse:
      description: Successfully received energy quantities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/energyScheduleDetails'

    getScheduleReserveQuantitiesResponse:
      description: Successfully received reserve quantities
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reserveScheduleDetails'
         
    badRequestResponse:
      description: Client has supplied invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid API Request
              value: 
                status: 400
                code: 'BAD_REQUEST'
                message: 'Invalid Request'
                detail: '52 is greater than maximum 50 for paramter "tradingPeriod"'
                timestamp: '20210406T11:54:33+13:00'
    authorisationErrorResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Client not authorised to access resource
              value: 
                status: 403
                code: 'FORBIDDEN'
                message: 'Invalid or missing authorisation token'
                timestamp: '20210406T11:54:33+13:00'
    notFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Schedule not found
              value: 
                status: 404
                code: 'NOT_FOUND'
                message: 'Schedule "ABC" not found'
                timestamp: '20210406T11:54:33+13:00'
    methodNotAllowedResponse:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid accept header
              value: 
                status: 405
                code: 'METHOD_NOT_ALLOWED'
                message: 'HTTP Method "PUT" is not valid for this operation'
                timestamp: '20210406T11:54:33+13:00'
    unacceptableResponse:
      description: Content type not produced
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid accept header
              value: 
                status: 406
                code: 'NOT_ACCEPTABLE'
                message: 'Requested content type "application/xml" is not produced by this API'
                detail: 'Only "application/json" is produced by this API'
                timestamp: '20210406T11:54:33+13:00'
    internalErrorResponse:
      description: Content type not produced
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid accept header
              value: 
                status: 500
                code: 'INTERNAL_SERVER_ERROR'
                message: 'Internal server error. Please try again later.'
                timestamp: '20210406T11:54:33+13:00'
            
  schemas:

    listSchedulesResponse:
      type: object
      required:
        - reserveSchedules
        - energySchedules
      properties:
        reserveSchedules:
          type: array
          items:
            type: string
          example:
            - NRS
            - PRS
        energySchedules:
          type: array
          items:
            type: string   
          example:
            - NRS
            - PRS
            - WDS

    getEnergyQuantitiesResponse:
      type: object
      required: 
        - schedules
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/energyScheduleDetails'

    getReserveQuantitiesResponse:
      type: object
      required: 
        - schedules
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/reserveScheduleDetails'

    energyScheduleDetails:
      type: object
      required:
        - schedule
        - energyQuantities
      properties:
        schedule:
          $ref: '#/components/schemas/schedule'
        energyQuantities:
          type: array
          items:
            $ref: '#/components/schemas/energyQuantitityDetails'

    reserveScheduleDetails:
      type: object
      required:
        - schedule
        - energyQuantities
      properties:
        schedule:
          $ref: '#/components/schemas/schedule'
        reserveQuantities:
          type: array
          items:
            $ref: '#/components/schemas/reserveQuantitityDetails'

    energyQuantitityDetails:
      allOf:
        - $ref: '#/components/schemas/baseQuantityDetails'
        - type: object
          properties:
            load: 
              type: number
              example: 4191.901
            generation:
              type: number
              example: 2829.590
            windGeneration:
              type: number
              example: 813.578
            totalBids:
              type: number
              example: 2324
            totalOffers:
              type: number
              example: 8465
            windOffers:
              type: number 
              example: 165

    reserveQuantitityDetails:
      allOf:
        - $ref: '#/components/schemas/baseQuantityDetails'
        - type: object
          properties:
            runType:
              type: string
              maxLength: 1
              example: N
            reserveClass:
              type: string
              example: F
            runClass:
              type: string
              example: R2
            price:
              $ref: '#/components/schemas/price'
            reserveMw:
              type: number
              example: 344.773
            riskMw:
              type: number
              example: 12.43
            riskAdjustmentFactor:
              type: number
              example: 33.43

    baseQuantityDetails:
      type: object
      required:
        - tradingDateTime
        - tradingPeriod
        - schedule
      properties:
        tradingDateTime:
          $ref: '#/components/schemas/trading_datetime'
        tradingPeriod:
          $ref: '#/components/schemas/trading_period'
        schedule:
          $ref: '#/components/schemas/schedule'
        island:
          $ref: '#/components/schemas/island'
  
    schedule:
      type: string
      example: NRS

    island:
      type: string
      enum: [NI, SI]

    run_class:
      type: string
      enum: [InstantaneousReserve, ReserveOffers, AdjustedReserveOffers]

    trading_datetime:
      type: string
      format: datetime
      example: '2021-06-16T10:30:00+12:00'

    trading_period:
      type: integer
      minimum: 1
      maximum: 50
      description: |-
        A sequential 30-minute period starting from period 1 at midnight (00:00) and, on most days,
        ending at period 48 at 23:30.  The exceptions to this are on the spring and autumn daylight-time changeover days.
        The spring change-over day is 23 hours long (as the clock jumps forward from 2am to 3am) so only has 46 trading-periods and
        the autumn change-over day is 25 hours long (as the clock jumps back from 3am to 2am) and has 50 trading-periods.
      example: 2

    price:
      type: number
      multipleOf: 0.01
      minimum: -1000000000
      maximum: 1000000000
      exclusiveMinimum: true
      exclusiveMaximum: true
      example: 12.34

    fault:
      description: Standard fault model
      type: object
      required:
        - status
        - code
        - message
        - timestamp
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 599
          description: The HTTP Status code of the response
          example: 404
        code:
          type: string
          description: Application specific error code
          example: INVALID_NODE
        message:
          type: string
          description: Basic error message
          example: Schedule 'XYZ' is not valid
        detail:
          type: string
          description: Extended error details
        timestamp:
          type: string
          format: datetime
          description: Server timestamp of failure
          example: '20210325T10:00:00+13:00'