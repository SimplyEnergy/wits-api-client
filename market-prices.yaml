openapi: 3.0.2
info:
  title: Market Prices
  description: >+
    #### Pre-requisites ####

    See [How To Call Our APIs](guides) for information on registration, authentication and authorisation requirements.


    ## Overview ##

    The purpose of this API is to retrieve market energy or reserve prices for identified schedule(s).


    Pricing information can be filtered in a variety of different ways. The minimum required parameters to filter data are a list of one or more schedules (market run types) and the market type being queried (either `E` for energy prices or `R` for reserve prices).


    * A single schedule can be queried through the `/schedules/{schedule}/prices` path.
    
    * Multiple schedules can be queried through the `/prices` path, identifying one or more schedules in the `schedules` query parameter.
    
    
    Schedules supported by this API can be obtained through a query to `/schedules`.
    
    
    In either case, the market type being queried must be included in the `market-type` query parameter.


    ## API Parameters ##
    
    ### Range Requests ###
    
    Pricing data can be filtered by a combination of trading datetime or sliding trading period ranges.
    
    
    The available query parameters for specifying a range are:
    
    * `from`
    
    * `to`
    
    * `back`
    
    * `forward`
    
    
    **From and To**
    
    
    The `from` and `to` parameters specify a date-time for which to filter queried data by. None, one or both parameters may be provided. The date-time must conform to the `RFC3339` standard formatting, e.g. `yyyy-MM-dd'T'HH:mm:ssXXX`. 
    
    
    If both `from` and `to` are provided, this is an inclusive window of time to query data for.
    
    
    If a `from` parameter is provided without a corresponding `to` parameter, this represents a query of data filtered from the trading period implied by the `from` date-time forward as far as possible for the queried schedule(s).
    
    
    If a `to` parameter is provided without a corresponding `from` parameter, this represents a query of data filtered from the oldest data available forward to the trading period implied by the `to` date-time.
    
    
    **Back and Forward**
    
    
    Unlike the `from` and `to` parameters, the `back` and `forward` filter can be used to identify a sliding window of data to query. A request cannot include both `from` and/or `to` parameters __and__ `back` and/or `forward`.
    
    
    The `back` parameter specifies a number of trading periods _before_ the current trading period to include data for. Correspondingly, the `to` parameter specifies a number of trading periods _ahead_ of the current trading period to include data for.
    
    
    For example, if the current trading period is `23` (11:00:00 NZT - 11:29:59 NZT) and both `back` and `forward` are set to `5`, data from trading periods `18` - `28` will be queried. Note that not all schedules will have data available beyond the current trading period.
    
    
    ### Node Filters ###
    
    The pricing data can also be filtered by providing the ID of one or more `nodes` (Grid injection or extraction points) in the corresponding query parameter. If this parameter is included, only data for nodes in the supplied list will be returned.
    
    
    Nodes supported by this API can be obtained through a query to `/nodes`.


    ### Island Filter ###
    
    The data can also be filtered by `Island` (`NI` or `SI`). When the `island` query parameter is set, only information pertaining to that island will be returned.
    
    
    ### Pagination ###

    This API supports basic pagination. A maximum of 10,000 records will be returned for any API call. If further data is required, set the `offset` query parameter to retrieve further data. For example, to retrieve the second set of 10,000 records set the `offset` query parameter to `10000`. Subsequently to retrieve the third set of 10,000 records, set the `offset` parameter to `20000`.

  version: 0.0.1
externalDocs:
  description: Check out the WITS portal
  url: 'https://www2.electricityinfo.co.nz/'

servers:
  - url: 'https://api.electricityinfo.co.nz/api/market-prices/v1'
    variables: {}
    description: Live


security:
  - oAuthClientCredentials: []

paths:

  /schedules:
    get:
      summary: Retrieve a list of schedules for which pricing data is currently available
      responses:
        "200":
          $ref: '#/components/responses/listSchedulesResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'


  /schedules/{schedule}/prices:
    parameters:
      - in: path
        name: schedule
        required: true
        schema:
          $ref: '#/components/schemas/schedule'
      - $ref: '#/components/parameters/marketType'
      - $ref: '#/components/parameters/nodes'
      - $ref: '#/components/parameters/from'
      - $ref: '#/components/parameters/to'
      - $ref: '#/components/parameters/back'
      - $ref: '#/components/parameters/forward'
      - $ref: '#/components/parameters/island'
      - $ref: '#/components/parameters/offset'
    get:
      summary: Retrieve a list of prices for the given schedule
      responses:
        "200":
          $ref: '#/components/responses/getSchedulePricesResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "404":
          $ref: '#/components/responses/notFoundResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'

  /nodes:
    get:
      summary: Retrieve a list of GXP/GIP supported by this API
      responses:
        "200":
          $ref: '#/components/responses/listNodesResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'

  /prices:
    get:
      summary: Retrieve a list of prices across schedules
      parameters:
        - $ref: '#/components/parameters/schedules'
        - $ref: '#/components/parameters/marketType'
        - $ref: '#/components/parameters/nodes'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
        - $ref: '#/components/parameters/back'
        - $ref: '#/components/parameters/forward'
        - $ref: '#/components/parameters/island'
        - $ref: '#/components/parameters/offset'
      responses:
        "200":
          $ref: '#/components/responses/getPricesResponse'
        "400":
          $ref: '#/components/responses/badRequestResponse'
        "403":
          $ref: '#/components/responses/authorisationErrorResponse'
        "405":
          $ref: '#/components/responses/methodNotAllowedResponse'
        "406":
          $ref: '#/components/responses/unacceptableResponse'
        "500":
          $ref: '#/components/responses/internalErrorResponse'
components:
  securitySchemes:
    oAuthClientCredentials:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      flows:
        clientCredentials:
          tokenUrl: /login/oauth2/token

  parameters:

    schedules:
      in: query
      name: schedules
      style: form
      explode: false
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/schedule'
    marketType:
      in: query
      name: marketType
      schema:
        $ref: '#/components/schemas/marketType'
      required: true
      description: Mandatory market type filter
    nodes:
      in: query
      name: nodes
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/node'
      required: false
      description: Optional node list filter
    from:
      in: query
      name: from
      schema:
        type: string
        format: datetime
      required: false
      description: Optional trading period to filter historical data
    to:
      in: query
      name: to
      schema:
        type: string
        format: datetime
      required: false
      description: Optional trading period to filter historical data
    back:
      in: query
      name: back
      schema:
        type: integer
        minimum: 1
        maximum: 48
      required: false
      description: Optional trading period filter
    forward:
      in: query
      name: forward
      schema:
        type: integer
        minimum: 1
        maximum: 48
      required: false
      description: Optional trading period filter
    island:
      in: query
      name: island
      schema:
        $ref: '#/components/schemas/island'
      required: false
      description: Return pricing data only for the selected island
    offset:
      in: query
      name: offset
      schema:
        $ref: '#/components/schemas/offset'
      required: false
      description: Optional offset parameter for basic pagination

  responses:

    getPricesResponse:
      description: Successfully received prices
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getPricesResponse'

    listSchedulesResponse:
      description: Successfully listed schedules
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listSchedulesResponse'

    listNodesResponse:
      description: Successfully listed schedules
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/node'

    getSchedulePricesResponse:
      description: Successfully received prices
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/scheduleDetails'

    badRequestResponse:
      description: Client has supplied invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid API Request
              value:
                status: 400
                code: 'BAD_REQUEST'
                message: 'Invalid Request'
                detail: '52 is greater than maximum 50 for paramter "tradingPeriod"'
                timestamp: '20210406T11:54:33+13:00'
    authorisationErrorResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Client not authorised to access resource
              value:
                status: 403
                code: 'FORBIDDEN'
                message: 'Invalid or missing authorisation token'
                timestamp: '20210406T11:54:33+13:00'
    notFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Schedule not found
              value:
                status: 404
                code: 'NOT_FOUND'
                message: 'Schedule "ABC" not found'
                timestamp: '20210406T11:54:33+13:00'
    methodNotAllowedResponse:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid accept header
              value:
                status: 405
                code: 'METHOD_NOT_ALLOWED'
                message: 'HTTP Method "PUT" is not valid for this operation'
                timestamp: '20210406T11:54:33+13:00'
    unacceptableResponse:
      description: Content type not produced
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid accept header
              value:
                status: 406
                code: 'NOT_ACCEPTABLE'
                message: 'Requested content type "application/xml" is not produced by this API'
                detail: 'Only "application/json" is produced by this API'
                timestamp: '20210406T11:54:33+13:00'
    internalErrorResponse:
      description: Content type not produced
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/fault'
          examples:
            schemaFailure:
              summary: Invalid accept header
              value:
                status: 500
                code: 'INTERNAL_SERVER_ERROR'
                message: 'Internal server error. Please try again later.'
                timestamp: '20210406T11:54:33+13:00'

  schemas:

    schedule:
      type: string
      example: RTP
    marketType:
      type: string
      enum: [E,R]
      example: E
    island:
      type: string
      enum: [NI, SI]
    offset:
      type: integer
      minimum: 0
      description: Optional offset for pagination
      example: 0
      default: 0
    node:
      type: string
      description: |-
        The name of the Grid Injection Point(GIP) or Grid Exit Point (GXP).
        This is the first 8 characters of the Market Node ID.
      example: BEN2202
    run_type:
      type: string
      description: Sub-type of schedule
      example: long
    price:
      type: number
      multipleOf: 0.01
      minimum: -1000000000
      maximum: 1000000000
      exclusiveMinimum: true
      exclusiveMaximum: true
      example: 12.34
    trading_date:
      type: string
      format: date
      example: '2021-03-16'
    trading_time:
      type: string
      format: date
      example: '2021-03-16'
    trading_period:
      type: integer
      minimum: 1
      maximum: 50
      description: |-
        A sequential 30-minute period starting from period 1 at midnight (00:00) and, on most days,
        ending at period 48 at 23:30.  The exceptions to this are on the spring and autumn daylight-time changeover days.
        The spring change-over day is 23 hours long (as the clock jumps forward from 2am to 3am) so only has 46 trading-periods and
        the autumn change-over day is 25 hours long (as the clock jumps back from 3am to 2am) and has 50 trading-periods.
      example: 2
    last_run_time:
      type: string
      format: datetime
      description: |-
        Solution run-time
      example: '2021-03-16T10:00:00+13:00'

    listSchedulesResponse:
      type: array
      items:
        type: object
        properties:
          schedule:
            $ref: '#/components/schemas/schedule'
          run_type:
            $ref: '#/components/schemas/run_type'
          market_type:
            $ref: '#/components/schemas/marketType'

    getPricesResponse:
      type: object
      required:
        - schedules
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/scheduleDetails'

    scheduleDetails:
      type: object
      required:
        - schedule
        - prices
      properties:
        schedule:
          $ref: '#/components/schemas/schedule'
        prices:
          type: array
          items:
            $ref: '#/components/schemas/priceDetails'

    priceDetails:
      type: object
      description: Price list retrieved
      required:
        - tradingDateTime
        - tradingPeriod
        - runTime
        - node
      properties:
        schedule:
          $ref: '#/components/schemas/schedule'
        trading_date:
          $ref: '#/components/schemas/trading_date'
        trading_time:
          $ref: '#/components/schemas/trading_time'
        trading_period:
          $ref: '#/components/schemas/trading_period'
        run_type:
          $ref: '#/components/schemas/run_type'
        last_run_time:
          $ref: '#/components/schemas/last_run_time'
        node:
          $ref: '#/components/schemas/node'
        price:
          $ref: '#/components/schemas/price'
        price_6s:
          $ref: '#/components/schemas/price'
        price_60s:
          $ref: '#/components/schemas/price'
        reserve_node:
          $ref: '#/components/schemas/node'
    fault:
      description: Standard fault model
      type: object
      required:
        - status
        - code
        - message
        - timestamp
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 599
          description: The HTTP Status code of the response
          example: 404
        code:
          type: string
          description: Application specific error code
          example: INVALID_NODE
        message:
          type: string
          description: Basic error message
          example: Schedule 'XYZ' is not valid
        detail:
          type: string
          description: Extended error details
        timestamp:
          type: string
          format: datetime
          description: Server timestamp of failure
          example: '20210325T10:00:00+13:00'